<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Build your private LTE network for IIOT]]></title>
      <url>/2017/12/28/Build-your-private-LTE-network-for-IIOT/</url>
      <content type="html"><![CDATA[<p><em>Abstract</em>:</p>
<blockquote>
<p>In some specfied conditions, the tele operator is considering share/reserve some spectrum resource to the IIOT(Industry IoT)applicance, like the NB-IoT/eMTC tech defined by 3GPP stardard.<br>In this article, we present a solution on how to offload LTE with Selected IP tracffic offload(SIPTO) tech, which provide another practical solution beside the traditional LTE macro cell deployment. This deployment will save the investment and simplify the Network Element deloyment, as well as increase the KPI in local factory.</p>
</blockquote>
<p><em>Keywords</em>: SIPTO, LIPA, IMobile Data Offloading</p>
<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>With the increase of cost spent in thse back-haul equipment(either in the urban area or in the low-intensity population area), more and more operator will like consider using the existed cable provider (like Comcast in US) as their back-haul alternatively. Specially FTTH and other PON technology become more and more popular, cable operator can provide relatively high QoS now.</p>
<p>3GPP present the TS23.829 as the guide to the HeNB manufacture how to deploy the off-load infrastructure cooperating with the macro cell to reach the best experience to the end-user. </p>
<p>Along with the population of Industry 4.0 and edge-computing, more and more geography-fixed device has the requirement to access the network with QoS and throughput. Specially in the smart-factory setup,  they want to rent the telcomm wireless network within their factory-domain or running their owned private wireless network.<br>Specially, the vCPEs in the same eNodeB want to intercommunicate to each other, which means the traffic happened between those vCPEs will not route outside of local domain. for example, in the steaming video like IPTV services in the set-top box, each app was used with P2P technology, locate gateway offloading and vCPEs interconnection each other is a big cons to the end-user’s experience.<br>In some industry area, the end sensors, robots or equipments will generate huge data per day, the factory owner will be careful to consider use, like LTE network as their connecting method. even most of data will not access outside of factory.<br>With this kind of deloyment, the operator will reduce stress on the network and make better profit on the IIoT revolution.</p>
<img src="/2017/12/28/Build-your-private-LTE-network-for-IIOT/00_network_deployment.png" alt="network_deployment" title="network_deployment">
<p>As a summary, some characters were:</p>
<ul>
<li>SON (automatically select the proper wireless configuration)</li>
<li>Traffic local Gateway offloading.</li>
<li>vCPE inter accessibility in the eNodeBs managed by a same LGW.</li>
</ul>
<a id="more"></a>
<h4 id="L-GW"><a href="#L-GW" class="headerlink" title="L-GW"></a>L-GW</h4><img src="/2017/12/28/Build-your-private-LTE-network-for-IIOT/01_network_stack.png" alt="network_stack" title="network_stack">
<p>An dedicated APN was assigned to vCPEs to indicate that the PDN connection established through this APN in the classic scenario, All the traffics associated with this PDN connection will be offloaded.</p>
<p>All the equipment under this cell/eNode will be assigned the IP address with the pre-defined pattern which require the private IP range reserved by INNNA.  L-GW will use NAT to masquerade those equipment.</p>
<h4 id="Local-Traffic-offload-and-optimizing"><a href="#Local-Traffic-offload-and-optimizing" class="headerlink" title="Local Traffic offload and optimizing"></a>Local Traffic offload and optimizing</h4><p>L-GW will be responsible to forward/route ip package, if traffic offload procedure was decided, the HeNB will directly forward the IP frame to the L-GW instead of GTP-U frame.</p>
<h4 id="VxLAN-support"><a href="#VxLAN-support" class="headerlink" title="VxLAN support"></a>VxLAN support</h4><p>In some factories, the end sensor/robots need peer-to-peer communication, which require the end device support the VxLAN, then all the sensors can be splited/planned in more flexible way.</p>
<h3 id="Design-details"><a href="#Design-details" class="headerlink" title="Design details"></a>Design details</h3><h3 id="Benchmark-comparsion"><a href="#Benchmark-comparsion" class="headerlink" title="Benchmark comparsion"></a>Benchmark comparsion</h3><h3 id="Customer-Use-Case"><a href="#Customer-Use-Case" class="headerlink" title="Customer Use Case"></a>Customer Use Case</h3>]]></content>
      
        
        <tags>
            
            <tag> SIPTO LIPA IMobile Data Offloading </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Build service with SOA in Openwrt]]></title>
      <url>/2017/11/22/Build-service-with-SOA-in-Openwrt/</url>
      <content type="html"><![CDATA[<p>In one of internal technical review meeting, the coder integrate the service into a existed substance/service, but considering of the scalability of this service, I strongly recommended the developer decouple this service from any substance and made them into a self-contained substance in order to provide the service to more clients in the future. </p>
<p>##SOA in practice<br> In the wikipedia <a href="https://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank" rel="external">page</a>, SOA was needed to meet the following basic rules.</p>
<blockquote>
<p>A service has four properties according to one of many definitions of SOA:</p>
<ul>
<li>It logically represents a business activity with a specified outcome.</li>
<li>It is self-contained.</li>
<li>It is a black box for its consumers.</li>
<li>It may consist of other underlying services.</li>
</ul>
</blockquote>
<p>In the resource-limited SoC, it maybe not practical to deploy individual service with one standalone process,  but it will be possible deploying partly/all services in one process and multiplexed the service using the different domain/interface id.<br><a id="more"></a></p>
<h2 id="ubus-in-Openwrt"><a href="#ubus-in-Openwrt" class="headerlink" title="ubus in Openwrt"></a>ubus in Openwrt</h2><p><a href="https://wiki.openwrt.org/doc/techref/ubus" target="_blank" rel="external">ubus</a> is an daemon process for other process/daemons to register themselfs as well as sending messages. The interface is implemented using Unix sockets and use TLV(type-length-value) messages.</p>
<p>Just for example:</p>
<p>By default, list all namespaces registered with the RPC server:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">root@uplink:~# ubus list</div><div class="line">network</div><div class="line">network.device</div><div class="line">network.interface.lan</div><div class="line">network.interface.loopback</div><div class="line">network.interface.wan</div><div class="line">root@uplink:~#</div></pre></td></tr></table></figure></p>
<p>If invoked with -v, the procedures and their argument signatures are dumped in addition to the namespace path:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">root@uplink:~# ubus -v list network.interface.lan</div><div class="line">&apos;network.interface.lan&apos; @099f0c8b</div><div class="line">	&quot;up&quot;: &#123;  &#125;</div><div class="line">	&quot;down&quot;: &#123;  &#125;</div><div class="line">	&quot;status&quot;: &#123;  &#125;</div><div class="line">	&quot;prepare&quot;: &#123;  &#125;</div><div class="line">	&quot;add_device&quot;: &#123; &quot;name&quot;: &quot;String&quot; &#125;</div><div class="line">	&quot;remove_device&quot;: &#123; &quot;name&quot;: &quot;String&quot; &#125;</div><div class="line">	&quot;notify_proto&quot;: &#123;  &#125;</div><div class="line">	&quot;remove&quot;: &#123;  &#125;</div><div class="line">	&quot;set_data&quot;: &#123;  &#125;</div><div class="line">root@uplink:~#</div></pre></td></tr></table></figure></p>
<p>Besides, <code>ubusd</code> define others message handlers as followings:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static const ubus_cmd_cb handlers[__UBUS_MSG_LAST] = &#123;  </div><div class="line">[UBUS_MSG_PING] = ubusd_send_pong,  </div><div class="line">[UBUS_MSG_ADD_OBJECT] = ubusd_handle_add_object,  </div><div class="line">[UBUS_MSG_REMOVE_OBJECT] = ubusd_handle_remove_object,  </div><div class="line">[UBUS_MSG_LOOKUP] = ubusd_handle_lookup,  </div><div class="line">[UBUS_MSG_INVOKE] = ubusd_handle_invoke,  </div><div class="line">[UBUS_MSG_STATUS] = ubusd_handle_response,  </div><div class="line">[UBUS_MSG_DATA] = ubusd_handle_response,  </div><div class="line">[UBUS_MSG_SUBSCRIBE] = ubusd_handle_add_watch,  </div><div class="line">[UBUS_MSG_UNSUBSCRIBE] = ubusd_handle_remove_watch,  </div><div class="line">[UBUS_MSG_NOTIFY] = ubusd_handle_notify,  </div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="how-ubus-works"><a href="#how-ubus-works" class="headerlink" title="how ubus works"></a>how ubus works</h3><p>The following picture demonstrate the interactive between <code>ubus client 1</code> and <code>ubus client 2</code>.<br><code>ubus client 1</code> register two <code>namespace</code> towards <code>ubusd</code>. In the namespace <code>interface</code>, there are 2 methods <strong>getlanip</strong> and <strong>setlanip</strong> for accepting the external actions. </p>
<img src="/2017/11/22/Build-service-with-SOA-in-Openwrt/sample1.png" alt="Picture-01" title="Picture-01">
<p>The <code>client</code> can <strong>notify</strong> all the subscribed clients if the proper event in <code>client</code> need to broadcast.</p>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><p><code>License</code> service is a service which provide license information like “what licenses was installed? what capacity did one specified license have?”, and if the license was expired, <code>license</code>service need notify this change to the client, as well as when new license was added.<br>In summary, <code>License</code> service need provide such kinds of services:</p>
<ol>
<li>Get: <ul>
<li>Service is ready or not.</li>
<li>Client can query detailed information on one/several license(s).</li>
</ul>
</li>
<li>Set:<ul>
<li>Add/Remove a license file.</li>
</ul>
</li>
<li>Notify:<ul>
<li>Notify all the registed client(s) about the changes.</li>
</ul>
</li>
</ol>
<img src="/2017/11/22/Build-service-with-SOA-in-Openwrt/sample2.png" alt="Picture-02" title="Picture-02">
<p>During the booting time, <code>coordinator</code> need to start the service firstly, and confirm it’s status is READY, then booting other substances. Each substance need register themselves to the <code>service</code>, some substances only get the license info which they care about, and ready to receive the changes on these licenses.</p>
<p>##END<br>It seems like <code>ubus</code> can’t good support the multi-thread environment, after checking the source code, it was found that it use some global variable to store the value. It need to be re-constructed if used in the multi-thread env.</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Design a license system in embedded system]]></title>
      <url>/2017/11/02/Design-a-license-system-in-embedded-system/</url>
      <content type="html"><![CDATA[<blockquote>
<p><code>License</code> was widely used on many software/hardware area, such as Microsoft Windows Series, which use dedicated hardware to store their key and other information to verify the booting OS is legal or not. Dell or EMC or Oracle Database use license to limit how many HW resource can be used. So, <code>license</code> system is an valuable assert to the company as it can bring the direct profit.</p>
</blockquote>
<h2 id="Aspects-when-designing-license-system"><a href="#Aspects-when-designing-license-system" class="headerlink" title="Aspects when designing license system"></a>Aspects when designing license system</h2><ul>
<li>Security</li>
<li>Compatible </li>
</ul>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>In common, the company would like to design a universal HW platform to carry on different requirements with the reason of decreasing the complex of BOM, leverage the cost on HW expense, etc. In order to make more profit on a universal hardware platform, then you need a license system to give the right authority to your sales/customer. For example, in the wireless system, some company would like sale the HW without any charge or very low price, but those HW only can carry on low volume data/service in the <code>BASIC</code> state, f.g. LTE station in <code>BASIC</code> mode only can take 16 Users in one BST,  a limited throughput, a limited Cells can be setup. Basically,  you had to buy a suitable license paper meeting your requirement, just like the menu in the restaurant, you can’t image how many menus did the company make ready for you.<br>In one word, License can make money!!!</p>
<a id="more"></a>
<h2 id="License-file-structure"><a href="#License-file-structure" class="headerlink" title="License file structure"></a>License file structure</h2><p>I suppose the company had already made through on what functionality can be made into <code>license</code>, then a license list need to be properly designed with readable language and description.<br>XML will be the good choice to record such list. Some necessary element in this XML should include:</p>
<ul>
<li>License Name</li>
<li>License Number (unique number among the license)</li>
<li>License Signed Date (2017-10-05)</li>
<li>License period of validity (2017-10-05 — 2018-10-05)</li>
<li>License specify contents (this will be specified according to each license with nested XML representation)</li>
<li>Encrypted signed message using the PK(private key) to protect the integrity and security of license message</li>
</ul>
<h2 id="Store-the-public-key"><a href="#Store-the-public-key" class="headerlink" title="Store the public key"></a>Store the public key</h2><p>ARM based SoC provide <code>TrustZone</code> tech to the end-user, It use hardware-based hypervisor to run two VMs in one SoC. The software running in the <code>TrustZone</code> protected zone was only allowed by the release company, which means any software which want to run in <code>TrustZone</code> area must get signed by the SoC company.<br>Technically, the <code>TrustZone</code> is the more safe method to store the key and other security information, even in the Motorola smartphone, the cracker success bypassing the protection of the <code>TrustZone</code> <a href="https://www.xda-developers.com/qualcomm-snapdragon-845-secure-processing-unit/" target="_blank" rel="external">link</a> The latest <code>HuaWei</code> smartphone claim they can replace the hardware token released by the BANK in their device when do some money transition, they all use <code>TrustZone</code> tech.  The latest Qualcomm use their own property SPC instead of ARM <code>trustzone</code> to store such security information.<br>But it will be BIG for us if we only want to store a key or some unique number on the SoC using <code>TrustZone</code> as there are no requirement that the app running in the SoC need or less need to store their per-app key into system.<br>As an alternative, In most SoC, there is an OTP(on-time-programming) area in the system, many SoC has such kind of area in their design, such as <code>efuse</code> area in Intel platform, <code>qfuse</code> area in Qualcomm platform, even some FLASH manufacture (Macro) make some area for such usage, but if some old device or the latest device which don’t consider such requirement in advance don’t have any such kind area with such attribute, how to handle such issues?<br>My suggestion is use one series of non-modifiable code (make some confusion work on this code) (unique ID include your CPU ID, etc)to sign your public key file, this method can protect you in some certain range.</p>
<p>The whole procedure will be like:</p>
<img src="/2017/11/02/Design-a-license-system-in-embedded-system/sample.png" alt="Picture-01" title="Picture-01">
<h2 id="Manage-the-private-key"><a href="#Manage-the-private-key" class="headerlink" title="Manage the private key"></a>Manage the private key</h2><p>As time intensity,  I select the <a href="https://www.hashicorp.com/products/vault" target="_blank" rel="external">Vault</a> to manage the private key, and wrote the back-end license generating tools using Go. We define the 2 different role on managing/using the private key. </p>
<ul>
<li>Administrator (who can generate the new pair key and revoke the key)</li>
<li>Operator(who can use the back-end tools to generate the license key)<br>As the Operator has no authority to see the private key, then it guarantee the security on generating the license file.</li>
</ul>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Actually,  the cracker still has many path to crack this license system, like searching the public API nm string in the binary code and do the binary translate work or code injection, modifying the contents if you put some sensitive contents into fixed address in ram. etc.</p>
<p>So, it need programmer know some basic knowledge when they work on the sensitive information, don’t store such information in fixed address area, try to use stack or do some confusion work on such information.</p>
<p>It is better read/care the latest security information released in the public, and make your defend with much consideration.</p>
<p>##–Continued<br>Finally, after some discussion with other guys working in Standard Organization, they recommended to fully meet the requirement of the 3GPP <a href="http://www.etsi.org/deliver/etsi_ts/133300_133399/133320/09.05.00_60/ts_133320v090500p.pdf" target="_blank" rel="external">TS133.320</a>.<br>This specification defines a Trusted Environment(TrE) to perform sensitive functions and store sensitive data. This data must be unknowable to unauthorized entities.<br>Some requirements follows:</p>
<ul>
<li>The TrE must be built from a hardware root of trust.</li>
<li>The Integrity of the TrE must be verified during the boot process.</li>
<li>The TrE must verify the integrity of the rest of the system software.</li>
<li>The TrE must perform the required sensitive functions to validate the device and device integrity.</li>
<li>The TrE must perform the required sensitive functions to authenticate the device with the operator network.</li>
<li>…</li>
</ul>
<p>So, if we fully support this standard, then we need the help of the <code>TrustZone</code>, where we build the TrE for the eNodeB.</p>
<ul>
<li>The HNB’s identity (SN) shall be stored in the TrE and shall not be modifiable. (it was wrote during the production with a stardard)</li>
<li>The HNB’s private key shall be stored in the TrE and shall not be exposed outside of the TrE. (private key was used on such like IPSEC procedure)</li>
<li>The root certificate used to verify the signatures on the SeGW certificate shall be stored in the TrE and shall be writable by authorized access only. The verification process for signatures shall be performed by the HNB’s TrE. (this related to the revoking work)</li>
<li>The HNB’s TrE shall be used to compute the AUTH payload used during the IKE_AUTH request message exchanges.</li>
</ul>
<p>We are now evaluating the <a href="https://www.op-tee.org" target="_blank" rel="external">OP-TEE</a> in our product, I will make another blog on this work.</p>
<p>Here is a good representation on the <a href="https://www.linuxplumbersconf.org/2016/ocw/system/presentations/3675/original/LPC%202016%20-%20OP-TEE.pdf" target="_blank" rel="external">OP-TEE</a>.</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Fast logging system in embedded system]]></title>
      <url>/2017/10/23/Fast-logging-system-in-embedded-system/</url>
      <content type="html"><![CDATA[<h1 id="Fast-logging-system-in-embedded-system"><a href="#Fast-logging-system-in-embedded-system" class="headerlink" title="Fast logging system in embedded system"></a>Fast logging system in embedded system</h1><hr>
<p>[TOC]</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>FLOG is a light-weight logging system which has features like, high throughput, non-blocking and lock-less write from different process, crash save in field. It is suitable for the embedded system using Linux system.</p>
<h2 id="Log-VS-Trace"><a href="#Log-VS-Trace" class="headerlink" title="Log VS. Trace"></a>Log VS. Trace</h2><p><strong>Log</strong> was used as recording the activity on subsystem, it provide the activity information to the system administrator or operator to give them a preview on the activity. such as booting information when kernel boot, plug-in-plug-out event popup by kernel.</p>
<img src="/2017/10/23/Fast-logging-system-in-embedded-system/log_sample.png" alt="Picture-01" title="Picture-01">
<p><strong>Trace</strong> was used as recording detailed information on specified system, its main purpose is used as tracking the detail into this system, the output which it generate was used by programmer to analysis what is going on when some problem happened. In common occurrence, it only be requested when system was not working as expected, such as the throughput was not reached into the theory level in wireless card, etc.</p>
<a id="more"></a>
<h2 id="Current-status"><a href="#Current-status" class="headerlink" title="Current status"></a>Current status</h2><p>For most products working in the embedded Linux, they always use <code>syslogd</code> or <code>rsyslogd</code> as their logging system, but actually, those daemon was designed to use as system logging such as events or activity generating from subsystem instead of recording log requiring high throughput such as tracing the detailed internal activity. </p>
<h3 id="What-it-will-be-happened-if-use-them"><a href="#What-it-will-be-happened-if-use-them" class="headerlink" title="What it will be happened if use them?"></a>What it will be happened if use them?</h3><p>If you use <code>syslogd</code> or <code>rsyslogd</code> as tracing work in local host, the process use them record the log via local file socket. even you redirect the log to the remote logging workstation, it use a UDP socket to send the log. If the tracing point was laid where the event happened on each per tti(1ms) kicked, then the following aspects you need to know:</p>
<ul>
<li>Though you can use un-blocking send()/sendto()/sendmsg() on socket, but sending buffer has size limit on socket (sysconf(), you can get them from /proc/net/….), once the buffer was reached this limit, the send() operation will return fail as reason of buffer was overflow or get blocked (if you config the socket properties) then it get switched by scheduler.</li>
<li>Though <code>syslogd</code> will get schedule in time-slice scheduler pattern. but this daemon always work as low-priority process level with 20(nomal process level), you can reassigned this priority to a higher value, but you will get performance penalty in real-time system as nobody want a logging daemon break their performance.</li>
<li>Then the daemon will get scheduled when user application blocked by <code>send()</code> operation, in that time, it need to fetch many UDP message from skb buffer and write them into file, but in the other hand, it will be unintended interrupted by other processes with higher priority than him. So, the throughput will be dramatically decreased into a low level or even lead to unstable on the whole system.</li>
</ul>
<img src="/2017/10/23/Fast-logging-system-in-embedded-system/syslogd.png" alt="Picture-02" title="Picture-02">
<p>In one of wireless router project, the engineer use <code>syslogd</code> to dump the internal operations per TTI(1ms), about 5 min later, the PHY-MAC can’t meet the minimum requirement of sync, then the whole system will down sooner.</p>
<h2 id="How-flog-aim-at"><a href="#How-flog-aim-at" class="headerlink" title="How flog aim at?"></a>How flog aim at?</h2><p>FLOG, want to address the problem above, and more than that:</p>
<ul>
<li>High throughput.</li>
<li>Non blocking logging operation (try its best).</li>
<li>No system call penalty. </li>
<li>Ability to be used by thread in either user-space level or kernel module.</li>
<li>Ability to work in multi processes environment.</li>
<li>Ability to redirect to remote machine.(not implemented now)</li>
<li>Compatible with Syslog format.</li>
<li>Provide far more control on filter in user space.</li>
<li>Discard message if it had to do that.</li>
</ul>
<h2 id="Internal-design"><a href="#Internal-design" class="headerlink" title="Internal design"></a>Internal design</h2><img src="/2017/10/23/Fast-logging-system-in-embedded-system/arch.png" alt="Picture-03" title="Picture-03">
<h3 id="no-system-call-user-space-operation"><a href="#no-system-call-user-space-operation" class="headerlink" title="no system call, user space operation"></a>no system call, user space operation</h3><p>For simplify, FLOG try its best NOT use system call for better performance.<br>The processes running in embedded system normally get signed by the publisher, and the binary get verified by the system during booting procedure, so we think all the binary running on the embedded system are reliable and safety.<br>With this guarantee, we create a new character device named <code>rdev</code> which reserved a range of space from boot args.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bootargs:</div><div class="line">root=/dev/mtdblock8 rw rootfstype=jffs2 mem=512M rram_size=8M ...</div></pre></td></tr></table></figure></p>
<p>Considering of the characteristic of this device named <code>rdev</code>which has no hot spot write/read from this memory, after full evaluation, this range of memory was config with no any L1/L2 cache.</p>
<p>Then, during the booting time, we have to reserve this range of  space with <code>request_mem_region</code>, and followed by <code>ioremap_nocache</code> to create the PG table for this device.</p>
<p>Device driver accept the configurable parameter for the <strong>size</strong> of this region, 8M as the default value.</p>
<p>A little trick was here, as normal operation, application in user space will use <code>mmap</code> map this region to its own space area, but it would be noisy if every process who use <code>flog</code> will do such job, and occupy some virtual address space for the same physical space range. For saving the memory address space in each process, the device driver of <code>rdev</code> reassign the PG table permission attribute with <em>USER_ACCESS</em>, then it means every process can directly write or read the contents with the same PG tables. As we mentioned above, security is not a problem here as we trust every process running on this system.</p>
<img src="/2017/10/23/Fast-logging-system-in-embedded-system/virtual_space.png" alt="Picture-04" title="Picture-04">
<h3 id="dual-ring-buffer-design"><a href="#dual-ring-buffer-design" class="headerlink" title="dual ring buffer design"></a>dual ring buffer design</h3><p>Flog try its best not introduce any lock schematic into design as the lock will occasionally dramatic decrease the whole performance, it rather select to discard some message if too much message was flooded into the flog. </p>
<p>Dual-Ring-Buffer design is the answer to this challenge.</p>
<p>Multi-Log-Producer use lock-less list to update the internal structure of the working <code>BANK</code>, which won’t bother each other. </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">flog_write(msg)</div><div class="line">&#123;</div><div class="line">	<span class="comment">// calculate the size of writing message.</span></div><div class="line">	<span class="keyword">int</span> n = <span class="built_in">snprintf</span>(<span class="literal">NULL</span>, <span class="number">0</span>, ...);</div><div class="line">	<span class="comment">// get the current_bank from `segment header` and check the r/w lock bit whether or not busy updated by rlog_thread.</span></div><div class="line">	<span class="comment">//IF YES:</span></div><div class="line">	<span class="comment">//   Atomic switch to another bank, return back to the header in that bank;</span></div><div class="line">	<span class="comment">//ELSE:</span></div><div class="line">	<span class="comment">//    return back the header in the current bank;</span></div><div class="line">	<span class="comment">//END</span></div><div class="line">	current_bank = find_free_bank();</div><div class="line">	<span class="comment">// it should consider the round-again situation, I don't express it here for simplify.</span></div><div class="line">    atomic_set(current_bank_header, current_bank_header + align_address(n, <span class="number">4</span>));</div><div class="line">    atomic_set(message_header_rwlock);</div><div class="line">    <span class="built_in">snprintf</span>(message_header_ptr, msg, ...);</div><div class="line">    atomic_clr(message_header_rwlock);</div><div class="line">    <span class="comment">//Inform daemon process if the whole size exceed the config size. F.g. 2MB</span></div><div class="line">    flog_update_bank_write_size();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>elog demon process is the consumer process which dump the message in the raw into the disk, which was boot when whole system boot like <code>syslogd</code>. It read the configuration file under <code>/etc/flog.conf</code> directory. You can make it into effect with those parameters dynamically.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">flog.dirty_background_ratio = 50  //50% means half message full reached</div><div class="line">flog.dirty_interval_centisecs = 500  //ms</div><div class="line">flog.rolling_file_size = 4 // Mega size</div></pre></td></tr></table></figure></p>
<h3 id="flog-kernel-module"><a href="#flog-kernel-module" class="headerlink" title="flog kernel module"></a>flog kernel module</h3><p> This flog kernel module mainly change the permission of PG tables,  in my init version, the flush task was assigned into the kthread started in kernel, but it has some drawbacks.</p>
<h3 id="multi-core-deployment"><a href="#multi-core-deployment" class="headerlink" title="multi-core deployment"></a>multi-core deployment</h3><p>Multi-core processors are more popular now, it is preferred that the <code>flog</code> should be deployed with different core with another where the CPU-intensive task located. The final test result show in the multi-core env, the occurrence of discarding message have a great decreased.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In the wireless device, we often need to record the scheduler information in MAC per TTI(1ms), this requirement give us <em>BIG</em> challenge on the performance of logging system.  Facts proves the legacy tools used for <code>log</code> like <code>syslogd</code> <code>rsyslogd</code> can’t meet this requirement.</p>
<p>After a period of evaluation, this <code>flog</code> make impressive performance to other solution, later i will give some comparison between <code>flog</code> and <code>syslogd</code> and <code>rsyslogd</code>.</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[system test thoughts]]></title>
      <url>/2017/08/16/System-test-thoughts/</url>
      <content type="html"><![CDATA[<h1 id="谈谈如何有效的测量系统负载和响应"><a href="#谈谈如何有效的测量系统负载和响应" class="headerlink" title="谈谈如何有效的测量系统负载和响应"></a>谈谈如何有效的测量系统负载和响应</h1><p>嵌入式系统在系统测试过程中往往需要进行 Stability, Robustness, Accessbility, Responsibility 等等系统测试. 以来保证系统的功能完整性和健壮性. </p>
<p>嵌入式系统在设计在立项阶段会给出一个设计目标, 比如一款路由器，往往会给出以下类似的要求:</p>
<ul>
<li>支持 802.11n/g/a/b 支持.</li>
<li>支持 2.4G, 5G 双频.</li>
<li>最大速率支持 (450Mbps).</li>
<li>…</li>
</ul>
<p>作为系统设计者,需要在设计阶段锚定这些目标进行技术选型. 如果当前有类似产品设计经验, 可以借鉴之前的经验进行选型. 如果是第一次设计, 保守的做法便是借鉴其他厂商的方案, 等待自己对系统了解的加深和经验的丰富再进行下一阶段的开发. </p>
<p>无论以什么方式开局, 一个 ·能用· ·易用· ·好用· 的测试环境是必须要在第一时间阶段准备, 才能应对产品开发阶段的各项挑战.</p>
<p>结合我手中的几个项目, 想谈谈自己的一点关于系统测试的看法.</p>
<a id="more"></a>
<ul>
<li><p>XXX 4G 路由器</p>
<p>此产品是利用有线宽带做接入网络,使用4G信号进行无线传输的无线设备. 设备立项阶段的设计目标为:</p>
<ul>
<li>最大支持32用户.</li>
<li>上下行最高速率支持150Mbps.</li>
<li>支持IpSec传输.</li>
<li>支持Cwmp集中管理以及本地管理.</li>
<li>支持自开站和自优化功能.</li>
</ul>
<p>此项目是在之前已有的平台移植进行二次开发,成立之初就发现之前单元/系统测试的极大问题. 主要暴漏在:</p>
<ul>
<li>版本迭代过程中没有良好的回归测试覆盖. 历史版本中大量出现解决一个问题又引入新问题的commit. </li>
<li>系统测试没有自动化实践. 完全是靠人力进行弥补, 导致产品开发周期变长, 解决问题回溯历史时间很长.</li>
<li>有关系统测试的概念不清, 只关注功能实现而忽略了系统的性能.</li>
</ul>
<p>这里只对最后一项进行一些实践说明,怎么才能提高产品的系统性能.</p>
<p>之前产品有系统负载的测量, 主要关注在某个系统模拟负载情况下的CPU/MEMORY的性能. 但是没有对系统的整体性能进行测量. </p>
<h2 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h2><ul>
<li>系统是一个软实时的设备,每个TTI(1ms)进行用户的调度,如果没有及时调度用户,会发生速率变低, 对时延敏感的响应降低. 所以需要在系统测试中加入不同模拟负载下用户的调度响应时间.</li>
<li>CPU 的利用率仅仅描述了CPU一段时间的繁忙程度, 不能够反映系统的响应. 所以需要对实时的进程进行测量, 比如当前设备运行 的 MAC, PHY 实体都是对实时性要求最高的功能实体, 需要对两者之间消息处理的时间进行监控.</li>
<li>从用户角度出发, 需要监控从尝试接入到接入成功的时间响应, 此时间可以从另外一个维度进行系统的性能测量.</li>
</ul>
</li>
</ul>
<h2 id="问题发现"><a href="#问题发现" class="headerlink" title="问题发现"></a>问题发现</h2><h3 id="PHY-STOP"><a href="#PHY-STOP" class="headerlink" title="PHY STOP"></a>PHY STOP</h3><p>使用iPerf进行速率测试业务过程中,32UE情况下偶然会出现PHY STOP.</p>
<h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>MAC-PHY之间有3 TTI为时间窗口作为缓冲, 如果在 3ms 之内能够同步成功, 消息既可以满足要求. 如果某个时刻未能满足这个需求, 短时间内会造成速率下降, 长时间就会出现不同步现象 PHY 就会自动 STOP.</p>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>使用 ftrace 分析sche info发现, MAC进程会被 IO 切换, 查看分析文件发现, MAC某处使用syslog 打印信息, syslog 默认使用本地514端口做UDP报文, 一旦超过 系统 max_tranmit_message 的容量限制, 便会成为阻塞操作, 等待 syslogd 处理消息完毕. 但是syslogd 优先级为 20的正常优先级, 即为还没有处理完socket 的内容就立刻被抢占, 导致MAC吞吐率下降.</p>
<p>后改为自定义的日志处理系统, 可以改善这个情况.</p>
<h4 id="测试跟进"><a href="#测试跟进" class="headerlink" title="测试跟进"></a>测试跟进</h4><p>CII增加MAC-PHY消息处理响应,每周版本做跟踪处理.</p>
<h3 id="IpSec-影响"><a href="#IpSec-影响" class="headerlink" title="IpSec 影响"></a>IpSec 影响</h3><p>IpSec 开启后系统性能下降严重.</p>
<h4 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h4><p>IpSec 启用后系统性能对比未使用是无论是吞吐量还是响应时间都有很大的degradation.</p>
<h4 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h4><p>根据ftrace 打点分析, 在ipsec 同步加密数据阶段, 消耗了太多的cpu cycle. 使得系统负载升高.</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>使用硬件提供的协处理器进行硬件加解密功能, 降低CPU使用率. 使用 zero-copy 框架进行进一步优化.</p>
<h4 id="测试跟进-1"><a href="#测试跟进-1" class="headerlink" title="测试跟进"></a>测试跟进</h4><p>对报文在各功能实体模块之间进行打点记录,每周的系统测试记录详细数据.</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Some thoughts about memory issue]]></title>
      <url>/2017/06/26/Some-thoughts-about-memory-issue/</url>
      <content type="html"><![CDATA[<p>最近一段时间在忙于内存问题的事情，算是有些成果输出吧。借机谈论一下自己的感想。</p>
<p>近来工程团队遇到几次比较严重的内存泄漏问题,有一些问题无疾而终.在接手工作后发现这些问题均是发生<br>在客户的现场,很难在实验室复现. 即使能够在长时间stability测试发现问题，因为现场发生比较遥远，<br>也是很难去定位问题. 针对此类问题,团队近期输出了几个内部产品, 较好的解决了其中的一些问题。</p>
<a id="more"></a>
<p>项目团队在 Devops team 的协助下已经有一套比较完备的测试工具, 单元测试，valgrind内存检查.<br>但是在集成测试阶段还是缺乏手段去快速定位内存问题。针对此类问题</p>
<ul>
<li>工程团队重构了自定义的内存分配器，加入了头尾两部分的magic number, FREE() 内存后reset<br>内存单元内容. 在每次 ALLOC()/FREE() 强制检查合法性, 第一时间保留现场.</li>
<li>针对 wild pointer visit 的棘手问题的时候, 工程团队兵分两路. 一路从现有的集成测试出发，<br>使用valgrind工具编译代码直接进入集成测试阶段进行验证.针对实时性很强的部分进行stub处理.<br>另外一路，从系统角度，引入 <code>dynamic memory check</code>. 大致原理是binding 一个实时性可以调整<br>的background线程, 使用kernel调度进行实时性内存检查, 一旦发生内存越界 magic number over<br>ride 情况立刻报告. 实时性视内存问题严重性选择可调.</li>
<li>统计内存泄漏问题，输出了一个增强功能，主要是在内存分配阶段增加extra struct 到历史容器<br>存储. 添加<strong>FUNCTION</strong>, <strong>LINENUMBER</strong>, 方便定位问题.</li>
<li>集成测试采用震荡的方式进行用例测试，放大内存泄漏问题. 使用 snapshot 功能定制差异比较.</li>
<li>和Devops团队合作把内存检查当作必要测试添加到robust测试用例当中.</li>
</ul>
<p>通过工程团队的一段时间的持续改进,一些问题在后续的解决过程中得到效率的提升.</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Efficient data transfer through zero copy]]></title>
      <url>/2017/06/05/Efficient-data-transfer-through-zero-copy/</url>
      <content type="html"><![CDATA[<h2 id="Zero-copy-I-O-practice-in-project"><a href="#Zero-copy-I-O-practice-in-project" class="headerlink" title="Zero-copy I/O practice in project"></a>Zero-copy I/O practice in project</h2><p>Recently weeks, I was working on how to exploit the potentialities with the GMAC(1G Ethernet Media Access Controller)  on the SoC in my desktop. This SoC was used in the telecommunication field which provide the fast-transfer-data capability with some interesting MAC features. In this article, I had like share some experiences on how to utilize this MAC achieving better network throughput during this work.</p>
<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>@[Blog]</p>
<p>The following articles were worth having a look before going forward.</p>
<ul>
<li><a href="http://www.linuxjournal.com/article/6345" target="_blank" rel="external">Zero Copy I: User-Mode Perspective </a> (from Linux Journal, strongly recommended to read)</li>
<li><a href="http://dl.acm.org/citation.cfm?id=974947" target="_blank" rel="external">An Efficient Zero-Copy I/O Framework for UNIX</a> (most of thoughts comes from here)</li>
</ul>
<a id="more"></a>
<p>After reading these articles, then you will know how the Java.nio.channels works. If you have more time, you can dig more on the Kafaka, the most popular message queue framework written by LinkedIn.</p>
<p>So, let’s first look at the capability of PHY/MAC in my hand.</p>
<p>The PHY was provided by Atheros AR8031 as Ethernet transceiver and Atheros AR8327 as Ethernet switch.</p>
<ul>
<li>Compatible with IEEE Standard 802.3.</li>
<li>Full duplex operation 1000 Mbps operation speeds.</li>
<li>Statistics counter registers for RMON/MIB.</li>
<li>Embedded DMA.</li>
<li>Only for SGMII: Integrated Physical Coding Sub-layer (PCS) with auto-negotiation.</li>
<li>MDIO interface provided to control external phys from the Embedded RISC processor.</li>
<li>Automatic pad and cyclic redundancy check (CRC) generation on transmitted frames.</li>
<li>Automatic discard of frames received with errors.</li>
<li>Receive and transmit IP, TCP and UDP checksum offload. Both IPv4 and IPv6 packet types supported.</li>
<li>Address checking logic for four specific 48-bit addresses, four types of Ids, promiscuous mode, external<br>address checking, hash matching for unicast and multicast destination addresses and Wake-on-LAN.</li>
<li>Programmable IPG stretch.</li>
<li>Support for 802.1Q VLAN tagging with recognition of incoming VLAN and priority tagged frames.</li>
<li>Support for 802.1Qbb priority-based flow control – PFC Negotiation mode.</li>
<li>Full utilization of the Tx 1 Gbps line.</li>
<li>Provides sufficient buffer 16KB to support lossless reception of maximum length (jumbo-type) up to 10,240Bytes Ethernet frames.</li>
<li>For RGMII only: RGMII electrical characteristics compliant with RGMII v1.3 (thus based upon 2.5V CMOS interface voltages as defined by JEDEC EIA/JESD8-5), and are not compliant with RGMII v2.0.</li>
<li>Support for 1588 V1/V2.</li>
<li>Support for 802.3az Energy Efficient Ethernet</li>
</ul>
<p>Some advanced features which attract on me were:</p>
<ul>
<li>Statistics counter registers for RMON/MIB. (then we can get performance comparison on the MAC level, great feature.)</li>
<li>Programmable IPG stretch.</li>
<li>Checksum offload.</li>
<li>Automatic padding and CRC generation.</li>
<li>10KB buffer!</li>
<li>Sctter-Gather capability!</li>
</ul>
<h2 id="Do-it"><a href="#Do-it" class="headerlink" title="Do it"></a>Do it</h2><p>In this embedded project, it was not allowed 3rd organization/person install/uninstall any package without authorization, which was guaranteed by the Trust Zone Area, it means any installed package after HASH self-signed must be verified by the public key install on this area, otherwise it will failed to get install or upgrade. </p>
<p>What I want to said was - we trust the software installed on the board. Then it means we don’t need to consider the security issues mentioned in the 2nd article. Then we can simplify our design without considering security.</p>
<p>Some highlight feature include:</p>
<ul>
<li>Direct linear address mapping (vir2phy, phy2vir). support more than one page size space.</li>
<li>Zero-copy from filling the message in user space to sending message into the device in kernel space. (This GMAC support scatter-gather functionality , and the kernel later than 2.6.xx support the scatter-gather functionality)</li>
<li>Public API to application in user space, another public API to device driver in kernel module.</li>
<li>It provide a simple memory cache scheme in user space level, decreasing the system trap call on most circumstances. as well as it will re-fill/request to the memory pool if the threshold reached, one system call was happened only till this time.</li>
<li>It expose more detailed real-time information in /proc file-system. </li>
</ul>
<p>Some aspects need to consider in front of project are:</p>
<ul>
<li>Memory access time is unpredictable.</li>
<li>Memory bandwidth is limited.</li>
<li>Data change between application is very high.</li>
<li>Lifetime of exchanging data was short. (get/put)</li>
<li>Linux use page table translation to get better protection, which means it was not so straightforward to access memory.</li>
<li>Other hardware limitation, (System BUS bandwidth, MAC interface).</li>
</ul>
<p>These limitations/requirements decide the way what we do.  </p>
<p>In purpose of better memory management between kernel space and user space, we setup a raw virtual device with fixed I/O start address and length when start kernel, then both user space application which can use mmap() mapping the I/O space to its own virtual address and kernel module can access the same memory address via the fixed offset.</p>
<p>There are some inherent access attributes on those memory, so it is necessary to have a test on which cache scheme was best suit for our requirement.</p>
<img src="/2017/06/05/Efficient-data-transfer-through-zero-copy/cache-02.png" alt="Picture-01" title="Picture-01">
<p>For achieve the best system efficiency: </p>
<ul>
<li>Use L1-only cached memory.</li>
<li>Zero-copy whenever possible.</li>
<li>Minimize number of system calls and context switch.</li>
</ul>
<p>So, let’s have a look at this picture show:<br><img src="/2017/06/05/Efficient-data-transfer-through-zero-copy/zero-copy.png" alt="Picture-02" title="Picture-02"></p>
<h2 id="Design-details"><a href="#Design-details" class="headerlink" title="Design details"></a>Design details</h2><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>Actually, in our products, other module/process also use this POOL as hot-fast data storage, such like we develop the fsyslog which was an log framework providing the functions like syslogd(…) in Unix but it provide shared-memory based logging scheme with faster and non-blocking operation when logging in user application, etc. </p>
<p>Later I will show the comparison after this changes, which achieving more than 30% throughput boost in whole and 2% load decrease in our specified product.</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[don't use memset() init your struct]]></title>
      <url>/2017/06/04/don-t-use-memset-init-your-struct/</url>
      <content type="html"><![CDATA[<h2 id="Don’t-use-memset-init-your-struct"><a href="#Don’t-use-memset-init-your-struct" class="headerlink" title="Don’t use memset init your struct"></a>Don’t use memset init your struct</h2><p>Even in some open source project, we always see <code>memset</code> filled in the code, here I had like give the reason why we should not use <code>memset</code> if possible.</p>
<a id="more"></a>
<ul>
<li><p><code>memset</code> was subject to give side-effect to your code.<br><a href="http://en.cppreference.com/w/c/string/byte/memset" target="_blank" rel="external">memset description</a><br>In some projects, <code>memset</code> was used to flush the struct,<br>like the example given here <a href="https://linux.die.net/man/2/bind" target="_blank" rel="external">bind example given in die.net</a></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> sfd, cfd;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_un</span> <span class="title">my_addr</span>, <span class="title">peer_addr</span>;</span></div><div class="line">    ...</div><div class="line">    <span class="built_in">memset</span>(&amp;my_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct sockaddr_un));</div><div class="line">                        <span class="comment">/* Clear structure */</span></div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>memset</code> will flush with byte by byte in your raw memory. in such situations, only <code>0</code> or possible <code>0xFF</code> was allowed, otherwise you will get some results more than what you expected.<br>Some examples like this one: <a href="http://stackoverflow.com/questions/7202411/why-does-memsetarr-1-sizeofarr-sizeofint-not-clear-an-integer-array-t" target="_blank" rel="external">good example</a></p>
</li>
<li><p><code>memset</code> was not efficient than the other solution.<br><code>memset</code> will have one function call  when use it.<br>I will take this struct as example:</p>
<img src="/2017/06/04/don-t-use-memset-init-your-struct/example.png" alt="example code" title="example code">
<p>Disassemble code on the x86-64 arch machine.</p>
<img src="/2017/06/04/don-t-use-memset-init-your-struct/disassemble-01.png" alt="disassemble-01" title="disassemble-01">
<p>how we handle this with more elegant manner?<br>Use initlization!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">struct sockaddr_un myaddr = &#123;&#125;;</div></pre></td></tr></table></figure>
<p>Have a look at the disassemble code:</p>
<img src="/2017/06/04/don-t-use-memset-init-your-struct/disassemble-02.png" alt="disassemble-02" title="disassemble-02">
<p>Oops, it just use less code to finish this flush operation!</p>
<p>Don’t use memset anymore!</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Language </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/06/04/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
